
import java.awt.AWTException;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Robot;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.TextEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hieu bach
 */
public class MTE extends javax.swing.JFrame {

    /**
     * Creates new form MTE
     */
    Stack stk = new Stack<Object>();
    LinkedList<Object> redo = new LinkedList<>();
    boolean redoAble = false;
    boolean deleteAble, cutAble = false;
    boolean keyAble = false;
    char[] test = new char[1];
    boolean undoable = false;
    boolean clickAble = false;
    FileMangement file;
    MyHighLighter highligh;

    String tempString;
    int clickPos;
    EditManager edit;

    public MTE() {
        initComponents();
        setTitle("Untittled");
        Redo.setEnabled(false);
        Undo.setEnabled(false);
        StringSelection str = new StringSelection("");
        getToolkit().getSystemClipboard().setContents(str, str);
        file = new FileMangement();
        highligh = new MyHighLighter(Color.YELLOW);
        edit = new EditManager(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        Cut = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        Undo = new javax.swing.JMenuItem();
        Redo = new javax.swing.JMenuItem();
        Find = new javax.swing.JMenuItem();
        Replace = new javax.swing.JMenuItem();
        ChangeFont = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        txtArea.setRows(5);
        txtArea.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtAreaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        txtArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAreaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtAreaMousePressed(evt);
            }
        });
        txtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaKeyTyped(evt);
            }
        });
        txtArea.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                txtAreaVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(txtArea);

        jMenu3.setText("File");

        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu3.add(save);

        jMenuItem4.setText("Save as");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");

        jMenuItem6.setText("Select all");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        Cut.setText("Cut");
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        jMenu4.add(Cut);

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        jMenu4.add(Copy);

        Paste.setText("Paste");
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        jMenu4.add(Paste);

        Undo.setText("Undo");
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });
        jMenu4.add(Undo);

        Redo.setText("Redo");
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });
        jMenu4.add(Redo);

        Find.setText("Find");
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindActionPerformed(evt);
            }
        });
        jMenu4.add(Find);

        Replace.setText("Replace");
        Replace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReplaceActionPerformed(evt);
            }
        });
        jMenu4.add(Replace);

        ChangeFont.setText("Change font");
        ChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeFontActionPerformed(evt);
            }
        });
        jMenu4.add(ChangeFont);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
//        if (txtArea.getText().length() == 0 || !file.textChange) {
//            FileDialog fd = new FileDialog(this, "Open", FileDialog.LOAD);
//            fd.show();
//            if (fd.getFile() != null) {
//                file.FileName = fd.getDirectory() + fd.getFile();
//                String hold = file.checkFile();
//                txtArea.setText(hold);
//                setTitle(fd.getFile());
//            }
//        }
//        if (file.textChange) {
//            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to save before opening new file");
//            if (confirm == JOptionPane.OK_OPTION) {
//                file.saveAs(txtArea.getText());
//            } else {
//                FileDialog fd = new FileDialog(this, "Open", FileDialog.LOAD);
//                fd.show();
//                if (fd.getFile() != null) {
//                    file.FileName = fd.getDirectory() + fd.getFile() + ".txt";
//                    String hold = file.checkFile();
//                    txtArea.setText(hold);
//                    setTitle(fd.getFile());
//                }
//            }
//        }
        String Open = edit.Open(txtArea.getText());
        txtArea.setText(Open);
        String fileName = edit.getFileName();
        setTitle(fileName);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
//        if (file.FileName == "") {
//            file.saveAs(txtArea.getText());
//            setTitle(file.fn);
//        } else {
//            setTitle(file.fn);
//            file.saveFile(txtArea.getText());
//            save.setEnabled(false);
//        }
        edit.Save(txtArea.getText());
        setTitle(edit.getFileName());
    }//GEN-LAST:event_saveActionPerformed


    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        file.saveAs(txtArea.getText());
        setTitle(file.fn);
        clickAble = false;
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        Clipboard clip = getToolkit().getSystemClipboard();
        String temp = txtArea.getText();
        String stringCut = txtArea.getSelectedText();
        StringSelection str = new StringSelection(stringCut);
        clip.setContents(str, str);
        keyAble = false;
        clickAble = false;
    }//GEN-LAST:event_CopyActionPerformed


    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (!file.textChange) {
            setTitle("Untittled");
            txtArea.setText("");
        } else {
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to save before making new file");
            if (confirm == JOptionPane.OK_OPTION) {
                file.saveAs(txtArea.getText());
            }
        }
        save.setEnabled(false);
        clickAble = false;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        txtArea.selectAll();
    }//GEN-LAST:event_jMenuItem6ActionPerformed


    private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
        // TODO add your handling code here:
        Clipboard clip = getToolkit().getSystemClipboard();
        String temp = txtArea.getText();
        String stringCut = txtArea.getSelectedText();
        StringSelection str = new StringSelection(stringCut);
        clip.setContents(str, str);
        txtArea.replaceRange("", txtArea.getSelectionStart(), txtArea.getSelectionEnd());
        String tempReplace = txtArea.getText();
        if (temp.compareToIgnoreCase(tempReplace) != 0) {
            stk.add(temp);
        }
        Redo.setEnabled(true);
        Undo.setEnabled(true);
        cutAble = true;
        keyAble = false;
        clickAble = false;
    }//GEN-LAST:event_CutActionPerformed

    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
        String temp = txtArea.getText();
        Clipboard clip = getToolkit().getSystemClipboard();
        try {
            Transferable tran = clip.getContents(ERROR);
            String tmp = (String) tran.getTransferData(DataFlavor.stringFlavor);
            txtArea.replaceRange(tmp, txtArea.getSelectionStart(), txtArea.getSelectionEnd());

        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
        }
        String tempReplace = txtArea.getText();
        if (temp.compareToIgnoreCase(tempReplace) != 0) {
            stk.add(temp);
        }
        Redo.setEnabled(true);
        Undo.setEnabled(true);
        cutAble = true;
        keyAble = false;
        clickAble = false;
    }//GEN-LAST:event_PasteActionPerformed


    private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed
        // TODO add your handling code here:
        if (stk.size() != 0) {
            String result = (String) stk.pop();
            txtArea.setText(result);
        }
        if (stk.size() == 0) {
            Undo.setEnabled(false);
        }
        cutAble = true;
        keyAble = false;
        clickAble = false;
    }//GEN-LAST:event_UndoActionPerformed

    private void txtAreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtAreaAncestorAdded
        // TODO add your handling code here:

    }//GEN-LAST:event_txtAreaAncestorAdded

    private void txtAreaVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_txtAreaVetoableChange

    }//GEN-LAST:event_txtAreaVetoableChange

    public void addToRedo(String s) {
        if (s.length() != 0) {
            redo.add(0, s);
        }

    }
    private void txtAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAreaKeyTyped

    private void RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoActionPerformed
        // TODO add your handling code here:
//        if (keyAble) {
//            stk.add(txtArea.getText());
//            txtArea.append(Character.toString(test[0]));
//            return;
//        }
//        if (deleteAble) {
//            String str = txtArea.getText();
//            str = str.substring(0, str.length() - 1);
//            txtArea.setText(str);
//        }
//         else if(cutAble){
//             String str1=(String) stk.pop();
//             String str2=(String) stk.pop();
//             txtArea.setText(str1);
//              stk.push(str2);
//             stk.push(str1);
//        } 
        keyAble = false;

    }//GEN-LAST:event_RedoActionPerformed

    private void ChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeFontActionPerformed
        // TODO add your handling code here:
        String font = txtArea.getFont().getFamily();
        int style = txtArea.getFont().getStyle();
        int size = txtArea.getFont().getSize();
        new ChangeFont(this, true, font, style, size);
    }//GEN-LAST:event_ChangeFontActionPerformed

    public void setFont(String font, int style, float size) {
        txtArea.setFont(new Font(font, style, (int) size));
    }


    private void txtAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaKeyPressed
        // TODO add your handling code here:    
        if (txtArea.getText().length() != 0) {
            addToRedo(Character.toString(txtArea.getText().charAt(txtArea.getText().length() - 1)));
        }
        if (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE) {
            deleteAble = true;
            keyAble = false;
            System.out.println(txtArea.getText());

        } else {
            deleteAble = false;
            keyAble = true;
            test[0] = evt.getKeyChar();
        }
        tempString = txtArea.getText();

        System.out.println("Pressed =" + file.pos);
        stk.add(txtArea.getText());
        Redo.setEnabled(true);
        Undo.setEnabled(true);
        cutAble = false;
        file.textChange = true;
        clickAble = false;
        save.setEnabled(true);
    }//GEN-LAST:event_txtAreaKeyPressed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (file.FileName == "") {
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to save before quitting");
            if (confirm == JOptionPane.OK_OPTION) {
                file.saveAs(txtArea.getText());

            }
        }
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    public void HighLightWord(boolean isUp, boolean isDown, boolean isAll, String str, boolean match) {
        if (txtArea.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "Text input field is empty");
            return;
        }
        if (!isAll) {
            if (isUp) {
                highligh.removeHighlight(txtArea);
                if (file.pos > -1) {
                    System.out.println("file.pos= " + file.pos);
                    file.pos = highligh.HighLighWordUp(txtArea, str, file.pos, match);

                    if (file.pos == -2) {
                        JOptionPane.showMessageDialog(this, "Dont have that word");
                    } else {
                        txtArea.setCaretPosition(file.pos);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Dont have that word");
                }
            }
            if (isDown) {
                highligh.removeHighlight(txtArea);
                if (file.pos < txtArea.getText().length()) {
                    if (file.pos == -2) {
                        file.pos = 0;
                    }
                    int tmp = file.pos;
                    file.pos = highligh.HighLighWordDown(txtArea, str, file.pos, match);
                    if (tmp == file.pos) {
                        JOptionPane.showMessageDialog(this, "Dont have that word");
                    }
                    txtArea.setCaretPosition(file.pos);
                } else {
                    JOptionPane.showMessageDialog(this, "Dont have that word");
                }
            }
        } else {
            highligh.HighLighWordAll(txtArea, str, match);
        }

    }

    public void getPosition() {
        if (!clickAble) {
            file.pos = txtArea.getCaretPosition();
            System.out.println("not click click");
        } else {
            file.pos = clickPos;
        }
        System.out.println("file.pos= " + file.pos);
    }


    private void FindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindActionPerformed

        file.pos = txtArea.getCaretPosition();
        System.out.println("file.pos= " + file.pos);

        new find(this, true);

    }//GEN-LAST:event_FindActionPerformed

    private void txtAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaMouseClicked
//        try {
//            // TODO add your handling code here:
//            txtArea.print();
//        } catch (PrinterException ex) {
//            Logger.getLogger(MTE.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_txtAreaMouseClicked

    private void txtAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaMousePressed
        // TODO add your handling code here:
        file.pos = txtArea.viewToModel(new Point(evt.getX(), evt.getY()));
        clickPos = file.pos;
        clickAble = true;
    }//GEN-LAST:event_txtAreaMousePressed

    public int HighLightUp(String find, boolean match) {
        //highligh.removeHighlight(txtArea);
        if (file.pos > -1) {
            file.pos = highligh.HighLighWordUp(txtArea, find, file.pos, match);
            System.out.println("file.pos= " + file.pos);
            if (file.pos == -2) {
                JOptionPane.showMessageDialog(this, "Dont have that word");
            } else {
                txtArea.setCaretPosition(file.pos);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Dont have that word");
        }
        return file.pos;
    }

    public void replaceWord(String find, String replace, boolean match) {
        String txtString = txtArea.getText();
       file.pos=0;
        int index = txtString.indexOf(find, file.pos);
        System.out.println("index= " + index);
        if (index >= 0) {
            txtArea.replaceRange(replace, index, index + find.length());
            file.pos = highligh.HighLighWordDown(txtArea, find, index + find.length(), match);
            file.pos--;
        } else {
            JOptionPane.showMessageDialog(this, "Dont have that word");
        }

    }

    public void ReplaceAll(String find, String replace, boolean match) {
        Highlighter highligh = txtArea.getHighlighter();
        Document doc = txtArea.getDocument();
        String txt = null;
        try {
            txt = doc.getText(0, doc.getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(MyHighLighter.class.getName()).log(Level.SEVERE, null, ex);
        }
        int temp = 0;
        if (match) {
            for (int i = 0; i <= txt.length(); i++) {
                if ((temp = txt.indexOf(find, i)) >= 0) {
                    txtArea.replaceRange(replace, temp, temp + find.length());

                }

            }
        } else {
            for (int i = 0; i < txtArea.getText().length(); i++) {
                if ((temp = txtArea.getText().toUpperCase().indexOf(find.toUpperCase(), i)) >= 0) {
                    txtArea.replaceRange(replace, temp, temp + find.length());
                    i--;
                }

            }
        }

    }

    private void ReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReplaceActionPerformed
        // TODO add your handling code here:
        if (!clickAble) {
            file.pos = txtArea.getCaretPosition();
            System.out.println("file.pos= " + file.pos);
        }
        System.out.println("pos click= " + file.pos);
        new Replace(this, true);
    }//GEN-LAST:event_ReplaceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MTE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MTE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ChangeFont;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JMenuItem Find;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JMenuItem Redo;
    private javax.swing.JMenuItem Replace;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem save;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}
